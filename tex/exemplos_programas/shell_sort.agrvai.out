`// Shell sort`
`//`
`// Ordena um array de inteiros`
`//`
`// Criado por Valerio Nogueira em 01/08/2021 (Adaptado de https://panda.ime.usp.br/panda/static/pythonds_pt/05-OrdenacaoBusca/OShellSort.html)`
``
`int[] shell_sort(int n, int[] values) {`
              [0007, 0001] (0045,              TypeInt) {int}
              [0007, 0004] (0034,         OpenBrackets) {[}
              [0007, 0005] (0005,        CloseBrackets) {]}
              [0007, 0007] (0014,           Identifier) {shell_sort}
              [0007, 0017] (0035,      OpenParenthesis) {(}
              [0007, 0018] (0045,              TypeInt) {int}
              [0007, 0022] (0014,           Identifier) {n}
              [0007, 0023] (0007,                Comma) {,}
              [0007, 0025] (0045,              TypeInt) {int}
              [0007, 0028] (0034,         OpenBrackets) {[}
              [0007, 0029] (0005,        CloseBrackets) {]}
              [0007, 0031] (0014,           Identifier) {values}
              [0007, 0037] (0006,     CloseParenthesis) {)}
              [0007, 0039] (0033,           OpenBraces) {{}
`    int c = n / 2;`
              [0008, 0005] (0045,              TypeInt) {int}
              [0008, 0009] (0014,           Identifier) {c}
              [0008, 0011] (0000,           Assignment) {=}
              [0008, 0013] (0014,           Identifier) {n}
              [0008, 0015] (0021,                OpDiv) {/}
              [0008, 0017] (0017,              Integer) {2}
              [0008, 0018] (0039,            SemiColon) {;}
`    while(c > 0) {`
              [0009, 0005] (0048,                While) {while}
              [0009, 0010] (0035,      OpenParenthesis) {(}
              [0009, 0011] (0014,           Identifier) {c}
              [0009, 0013] (0023,                 OpGt) {>}
              [0009, 0015] (0017,              Integer) {0}
              [0009, 0016] (0006,     CloseParenthesis) {)}
              [0009, 0018] (0033,           OpenBraces) {{}
`        for(int start in [0 ... c]) {`
              [0010, 0009] (0013,                  For) {for}
              [0010, 0012] (0035,      OpenParenthesis) {(}
              [0010, 0013] (0045,              TypeInt) {int}
              [0010, 0017] (0014,           Identifier) {start}
              [0010, 0023] (0016,                   In) {in}
              [0010, 0026] (0034,         OpenBrackets) {[}
              [0010, 0027] (0017,              Integer) {0}
              [0010, 0029] (0009,             Ellipsis) {...}
              [0010, 0033] (0014,           Identifier) {c}
              [0010, 0034] (0005,        CloseBrackets) {]}
              [0010, 0035] (0006,     CloseParenthesis) {)}
              [0010, 0037] (0033,           OpenBraces) {{}
`            gap_insertion_sort(n, values, start, c);`
              [0011, 0013] (0014,           Identifier) {gap_insertion_sort}
              [0011, 0031] (0035,      OpenParenthesis) {(}
              [0011, 0032] (0014,           Identifier) {n}
              [0011, 0033] (0007,                Comma) {,}
              [0011, 0035] (0014,           Identifier) {values}
              [0011, 0041] (0007,                Comma) {,}
              [0011, 0043] (0014,           Identifier) {start}
              [0011, 0048] (0007,                Comma) {,}
              [0011, 0050] (0014,           Identifier) {c}
              [0011, 0051] (0006,     CloseParenthesis) {)}
              [0011, 0052] (0039,            SemiColon) {;}
``
`            for(int i in [start + c ... n] by c) {`
              [0013, 0013] (0013,                  For) {for}
              [0013, 0016] (0035,      OpenParenthesis) {(}
              [0013, 0017] (0045,              TypeInt) {int}
              [0013, 0021] (0014,           Identifier) {i}
              [0013, 0023] (0016,                   In) {in}
              [0013, 0026] (0034,         OpenBrackets) {[}
              [0013, 0027] (0014,           Identifier) {start}
              [0013, 0033] (0018,                OpAdd) {+}
              [0013, 0035] (0014,           Identifier) {c}
              [0013, 0037] (0009,             Ellipsis) {...}
              [0013, 0041] (0014,           Identifier) {n}
              [0013, 0042] (0005,        CloseBrackets) {]}
              [0013, 0044] (0014,           Identifier) {by}
              [0013, 0047] (0014,           Identifier) {c}
              [0013, 0048] (0006,     CloseParenthesis) {)}
              [0013, 0050] (0033,           OpenBraces) {{}
`                int current_value = values[i];`
              [0014, 0017] (0045,              TypeInt) {int}
              [0014, 0021] (0014,           Identifier) {current_value}
              [0014, 0035] (0000,           Assignment) {=}
              [0014, 0037] (0014,           Identifier) {values}
              [0014, 0043] (0034,         OpenBrackets) {[}
              [0014, 0044] (0014,           Identifier) {i}
              [0014, 0045] (0005,        CloseBrackets) {]}
              [0014, 0046] (0039,            SemiColon) {;}
`                int position = i;`
              [0015, 0017] (0045,              TypeInt) {int}
              [0015, 0021] (0014,           Identifier) {position}
              [0015, 0030] (0000,           Assignment) {=}
              [0015, 0032] (0014,           Identifier) {i}
              [0015, 0033] (0039,            SemiColon) {;}
`            `
`                while (position >= c && values[position - c] > current_values) {`
              [0017, 0017] (0048,                While) {while}
              [0017, 0023] (0035,      OpenParenthesis) {(}
              [0017, 0024] (0014,           Identifier) {position}
              [0017, 0033] (0024,                OpGte) {>=}
              [0017, 0036] (0014,           Identifier) {c}
              [0017, 0038] (0019,                OpAnd) {&&}
              [0017, 0041] (0014,           Identifier) {values}
              [0017, 0047] (0034,         OpenBrackets) {[}
              [0017, 0048] (0014,           Identifier) {position}
              [0017, 0057] (0032,                OpSub) {-}
              [0017, 0059] (0014,           Identifier) {c}
              [0017, 0060] (0005,        CloseBrackets) {]}
              [0017, 0062] (0023,                 OpGt) {>}
              [0017, 0064] (0014,           Identifier) {current_values}
              [0017, 0078] (0006,     CloseParenthesis) {)}
              [0017, 0080] (0033,           OpenBraces) {{}
`                    values[position] = values[position - c];`
              [0018, 0021] (0014,           Identifier) {values}
              [0018, 0027] (0034,         OpenBrackets) {[}
              [0018, 0028] (0014,           Identifier) {position}
              [0018, 0036] (0005,        CloseBrackets) {]}
              [0018, 0038] (0000,           Assignment) {=}
              [0018, 0040] (0014,           Identifier) {values}
              [0018, 0046] (0034,         OpenBrackets) {[}
              [0018, 0047] (0014,           Identifier) {position}
              [0018, 0056] (0032,                OpSub) {-}
              [0018, 0058] (0014,           Identifier) {c}
              [0018, 0059] (0005,        CloseBrackets) {]}
              [0018, 0060] (0039,            SemiColon) {;}
`                    position = position - c;`
              [0019, 0021] (0014,           Identifier) {position}
              [0019, 0030] (0000,           Assignment) {=}
              [0019, 0032] (0014,           Identifier) {position}
              [0019, 0041] (0032,                OpSub) {-}
              [0019, 0043] (0014,           Identifier) {c}
              [0019, 0044] (0039,            SemiColon) {;}
`                }`
              [0020, 0017] (0004,          CloseBraces) {}}
`            }`
              [0021, 0013] (0004,          CloseBraces) {}}
``
`            c = c/2;`
              [0023, 0013] (0014,           Identifier) {c}
              [0023, 0015] (0000,           Assignment) {=}
              [0023, 0017] (0014,           Identifier) {c}
              [0023, 0018] (0021,                OpDiv) {/}
              [0023, 0019] (0017,              Integer) {2}
              [0023, 0020] (0039,            SemiColon) {;}
`        }`
              [0024, 0009] (0004,          CloseBraces) {}}
`    }`
              [0025, 0005] (0004,          CloseBraces) {}}
``
`    return values;`
              [0027, 0005] (0037,               Return) {return}
              [0027, 0012] (0014,           Identifier) {values}
              [0027, 0018] (0039,            SemiColon) {;}
`}`
              [0028, 0001] (0004,          CloseBraces) {}}
``
`int main(string[] args) {`
              [0030, 0001] (0045,              TypeInt) {int}
              [0030, 0005] (0014,           Identifier) {main}
              [0030, 0009] (0035,      OpenParenthesis) {(}
              [0030, 0010] (0046,           TypeString) {string}
              [0030, 0016] (0034,         OpenBrackets) {[}
              [0030, 0017] (0005,        CloseBrackets) {]}
              [0030, 0019] (0014,           Identifier) {args}
              [0030, 0023] (0006,     CloseParenthesis) {)}
              [0030, 0025] (0033,           OpenBraces) {{}
`    int n;`
              [0031, 0005] (0045,              TypeInt) {int}
              [0031, 0009] (0014,           Identifier) {n}
              [0031, 0010] (0039,            SemiColon) {;}
`    int[] values;`
              [0032, 0005] (0045,              TypeInt) {int}
              [0032, 0008] (0034,         OpenBrackets) {[}
              [0032, 0009] (0005,        CloseBrackets) {]}
              [0032, 0011] (0014,           Identifier) {values}
              [0032, 0017] (0039,            SemiColon) {;}
``
`    scan(n);`
              [0034, 0005] (0038,                 Scan) {scan}
              [0034, 0009] (0035,      OpenParenthesis) {(}
              [0034, 0010] (0014,           Identifier) {n}
              [0034, 0011] (0006,     CloseParenthesis) {)}
              [0034, 0012] (0039,            SemiColon) {;}
`    for(int i in [0 ... n]) {`
              [0035, 0005] (0013,                  For) {for}
              [0035, 0008] (0035,      OpenParenthesis) {(}
              [0035, 0009] (0045,              TypeInt) {int}
              [0035, 0013] (0014,           Identifier) {i}
              [0035, 0015] (0016,                   In) {in}
              [0035, 0018] (0034,         OpenBrackets) {[}
              [0035, 0019] (0017,              Integer) {0}
              [0035, 0021] (0009,             Ellipsis) {...}
              [0035, 0025] (0014,           Identifier) {n}
              [0035, 0026] (0005,        CloseBrackets) {]}
              [0035, 0027] (0006,     CloseParenthesis) {)}
              [0035, 0029] (0033,           OpenBraces) {{}
`        scan(values[i]);`
              [0036, 0009] (0038,                 Scan) {scan}
              [0036, 0013] (0035,      OpenParenthesis) {(}
              [0036, 0014] (0014,           Identifier) {values}
              [0036, 0020] (0034,         OpenBrackets) {[}
              [0036, 0021] (0014,           Identifier) {i}
              [0036, 0022] (0005,        CloseBrackets) {]}
              [0036, 0023] (0006,     CloseParenthesis) {)}
              [0036, 0024] (0039,            SemiColon) {;}
`    }`
              [0037, 0005] (0004,          CloseBraces) {}}
``
`    values = shell_sort(n, values);`
              [0039, 0005] (0014,           Identifier) {values}
              [0039, 0012] (0000,           Assignment) {=}
              [0039, 0014] (0014,           Identifier) {shell_sort}
              [0039, 0024] (0035,      OpenParenthesis) {(}
              [0039, 0025] (0014,           Identifier) {n}
              [0039, 0026] (0007,                Comma) {,}
              [0039, 0028] (0014,           Identifier) {values}
              [0039, 0034] (0006,     CloseParenthesis) {)}
              [0039, 0035] (0039,            SemiColon) {;}
``
`    print(values);`
              [0041, 0005] (0036,                Print) {print}
              [0041, 0010] (0035,      OpenParenthesis) {(}
              [0041, 0011] (0014,           Identifier) {values}
              [0041, 0017] (0006,     CloseParenthesis) {)}
              [0041, 0018] (0039,            SemiColon) {;}
``
`    return 0;`
              [0043, 0005] (0037,               Return) {return}
              [0043, 0012] (0017,              Integer) {0}
              [0043, 0013] (0039,            SemiColon) {;}
`}`
              [0044, 0001] (0004,          CloseBraces) {}}
